
Line_Follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001231  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000708  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000891  00000000  00000000  00002151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ab  00000000  00000000  00002b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050c  00000000  00000000  0000322f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000373b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 73 02 	call	0x4e6	; 0x4e6 <main>
  74:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z12lcd_set_4bitv>:
  motion_set(0x06);
}

void stop (void) //hard stop
{
  motion_set(0x00);
  7c:	89 ef       	ldi	r24, 0xF9	; 249
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <_Z12lcd_set_4bitv+0x4>
  84:	00 c0       	rjmp	.+0      	; 0x86 <_Z12lcd_set_4bitv+0xa>
  86:	00 00       	nop
  88:	a8 98       	cbi	0x15, 0	; 21
  8a:	a9 98       	cbi	0x15, 1	; 21
  8c:	80 e3       	ldi	r24, 0x30	; 48
  8e:	85 bb       	out	0x15, r24	; 21
  90:	aa 9a       	sbi	0x15, 2	; 21
  92:	e1 ee       	ldi	r30, 0xE1	; 225
  94:	f4 e0       	ldi	r31, 0x04	; 4
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <_Z12lcd_set_4bitv+0x1a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_Z12lcd_set_4bitv+0x20>
  9c:	00 00       	nop
  9e:	aa 98       	cbi	0x15, 2	; 21
  a0:	e9 ef       	ldi	r30, 0xF9	; 249
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <_Z12lcd_set_4bitv+0x28>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <_Z12lcd_set_4bitv+0x2e>
  aa:	00 00       	nop
  ac:	a8 98       	cbi	0x15, 0	; 21
  ae:	a9 98       	cbi	0x15, 1	; 21
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	aa 9a       	sbi	0x15, 2	; 21
  b4:	e1 ee       	ldi	r30, 0xE1	; 225
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	31 97       	sbiw	r30, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <_Z12lcd_set_4bitv+0x3c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_Z12lcd_set_4bitv+0x42>
  be:	00 00       	nop
  c0:	aa 98       	cbi	0x15, 2	; 21
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z12lcd_set_4bitv+0x4a>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_Z12lcd_set_4bitv+0x50>
  cc:	00 00       	nop
  ce:	a8 98       	cbi	0x15, 0	; 21
  d0:	a9 98       	cbi	0x15, 1	; 21
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	81 ee       	ldi	r24, 0xE1	; 225
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <_Z12lcd_set_4bitv+0x5e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_Z12lcd_set_4bitv+0x64>
  e0:	00 00       	nop
  e2:	aa 98       	cbi	0x15, 2	; 21
  e4:	e9 ef       	ldi	r30, 0xF9	; 249
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_Z12lcd_set_4bitv+0x6c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_Z12lcd_set_4bitv+0x72>
  ee:	00 00       	nop
  f0:	a8 98       	cbi	0x15, 0	; 21
  f2:	a9 98       	cbi	0x15, 1	; 21
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	aa 9a       	sbi	0x15, 2	; 21
  fa:	81 ee       	ldi	r24, 0xE1	; 225
  fc:	94 e0       	ldi	r25, 0x04	; 4
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <_Z12lcd_set_4bitv+0x82>
 102:	00 c0       	rjmp	.+0      	; 0x104 <_Z12lcd_set_4bitv+0x88>
 104:	00 00       	nop
 106:	aa 98       	cbi	0x15, 2	; 21
 108:	08 95       	ret

0000010a <_Z14lcd_wr_commandh>:
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	95 bb       	out	0x15, r25	; 21
 110:	95 b3       	in	r25, 0x15	; 21
 112:	28 2f       	mov	r18, r24
 114:	20 7f       	andi	r18, 0xF0	; 240
 116:	92 2b       	or	r25, r18
 118:	95 bb       	out	0x15, r25	; 21
 11a:	a8 98       	cbi	0x15, 0	; 21
 11c:	a9 98       	cbi	0x15, 1	; 21
 11e:	aa 9a       	sbi	0x15, 2	; 21
 120:	e1 ee       	ldi	r30, 0xE1	; 225
 122:	f4 e0       	ldi	r31, 0x04	; 4
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <_Z14lcd_wr_commandh+0x1a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <_Z14lcd_wr_commandh+0x20>
 12a:	00 00       	nop
 12c:	aa 98       	cbi	0x15, 2	; 21
 12e:	95 b3       	in	r25, 0x15	; 21
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	95 bb       	out	0x15, r25	; 21
 134:	95 b3       	in	r25, 0x15	; 21
 136:	82 95       	swap	r24
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	89 2b       	or	r24, r25
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	a8 98       	cbi	0x15, 0	; 21
 140:	a9 98       	cbi	0x15, 1	; 21
 142:	aa 9a       	sbi	0x15, 2	; 21
 144:	81 ee       	ldi	r24, 0xE1	; 225
 146:	94 e0       	ldi	r25, 0x04	; 4
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <_Z14lcd_wr_commandh+0x3e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z14lcd_wr_commandh+0x44>
 14e:	00 00       	nop
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret

00000154 <_Z8lcd_initv>:
 154:	89 ef       	ldi	r24, 0xF9	; 249
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <_Z8lcd_initv+0x4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_Z8lcd_initv+0xa>
 15e:	00 00       	nop
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 17e:	08 95       	ret

00000180 <_Z11lcd_wr_charc>:
 180:	95 b3       	in	r25, 0x15	; 21
 182:	9f 70       	andi	r25, 0x0F	; 15
 184:	95 bb       	out	0x15, r25	; 21
 186:	95 b3       	in	r25, 0x15	; 21
 188:	28 2f       	mov	r18, r24
 18a:	20 7f       	andi	r18, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
 18e:	95 bb       	out	0x15, r25	; 21
 190:	a8 9a       	sbi	0x15, 0	; 21
 192:	a9 98       	cbi	0x15, 1	; 21
 194:	aa 9a       	sbi	0x15, 2	; 21
 196:	e1 ee       	ldi	r30, 0xE1	; 225
 198:	f4 e0       	ldi	r31, 0x04	; 4
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z11lcd_wr_charc+0x1a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_Z11lcd_wr_charc+0x20>
 1a0:	00 00       	nop
 1a2:	aa 98       	cbi	0x15, 2	; 21
 1a4:	95 b3       	in	r25, 0x15	; 21
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	95 bb       	out	0x15, r25	; 21
 1aa:	95 b3       	in	r25, 0x15	; 21
 1ac:	82 95       	swap	r24
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	89 2b       	or	r24, r25
 1b2:	85 bb       	out	0x15, r24	; 21
 1b4:	a8 9a       	sbi	0x15, 0	; 21
 1b6:	a9 98       	cbi	0x15, 1	; 21
 1b8:	aa 9a       	sbi	0x15, 2	; 21
 1ba:	81 ee       	ldi	r24, 0xE1	; 225
 1bc:	94 e0       	ldi	r25, 0x04	; 4
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <_Z11lcd_wr_charc+0x3e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_Z11lcd_wr_charc+0x44>
 1c4:	00 00       	nop
 1c6:	aa 98       	cbi	0x15, 2	; 21
 1c8:	08 95       	ret

000001ca <_Z8lcd_homev>:
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 1d0:	08 95       	ret

000001d2 <_Z10lcd_cursorcc>:
 1d2:	82 30       	cpi	r24, 0x02	; 2
 1d4:	71 f0       	breq	.+28     	; 0x1f2 <_Z10lcd_cursorcc+0x20>
 1d6:	18 f4       	brcc	.+6      	; 0x1de <_Z10lcd_cursorcc+0xc>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	31 f0       	breq	.+12     	; 0x1e8 <_Z10lcd_cursorcc+0x16>
 1dc:	08 95       	ret
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	69 f0       	breq	.+26     	; 0x1fc <_Z10lcd_cursorcc+0x2a>
 1e2:	84 30       	cpi	r24, 0x04	; 4
 1e4:	81 f0       	breq	.+32     	; 0x206 <_Z10lcd_cursorcc+0x34>
 1e6:	08 95       	ret
 1e8:	8f e7       	ldi	r24, 0x7F	; 127
 1ea:	86 0f       	add	r24, r22
 1ec:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 1f0:	08 95       	ret
 1f2:	8f eb       	ldi	r24, 0xBF	; 191
 1f4:	86 0f       	add	r24, r22
 1f6:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 1fa:	08 95       	ret
 1fc:	83 e9       	ldi	r24, 0x93	; 147
 1fe:	86 0f       	add	r24, r22
 200:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 204:	08 95       	ret
 206:	83 ed       	ldi	r24, 0xD3	; 211
 208:	86 0f       	add	r24, r22
 20a:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14lcd_wr_commandh>
 20e:	08 95       	ret

00000210 <_Z9lcd_printccji>:
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	8a 01       	movw	r16, r20
 21a:	e9 01       	movw	r28, r18
 21c:	88 23       	and	r24, r24
 21e:	11 f0       	breq	.+4      	; 0x224 <_Z9lcd_printccji+0x14>
 220:	61 11       	cpse	r22, r1
 222:	03 c0       	rjmp	.+6      	; 0x22a <_Z9lcd_printccji+0x1a>
 224:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z8lcd_homev>
 228:	02 c0       	rjmp	.+4      	; 0x22e <_Z9lcd_printccji+0x1e>
 22a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z10lcd_cursorcc>
 22e:	c5 30       	cpi	r28, 0x05	; 5
 230:	d1 05       	cpc	r29, r1
 232:	c9 f4       	brne	.+50     	; 0x266 <_Z9lcd_printccji+0x56>
 234:	98 01       	movw	r18, r16
 236:	32 95       	swap	r19
 238:	22 95       	swap	r18
 23a:	2f 70       	andi	r18, 0x0F	; 15
 23c:	23 27       	eor	r18, r19
 23e:	3f 70       	andi	r19, 0x0F	; 15
 240:	23 27       	eor	r18, r19
 242:	a7 e4       	ldi	r26, 0x47	; 71
 244:	b3 e0       	ldi	r27, 0x03	; 3
 246:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	96 95       	lsr	r25
 250:	87 95       	ror	r24
 252:	96 95       	lsr	r25
 254:	87 95       	ror	r24
 256:	c0 96       	adiw	r24, 0x30	; 48
 258:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <million+0x1>
 25c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <million>
 260:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 264:	04 c0       	rjmp	.+8      	; 0x26e <_Z9lcd_printccji+0x5e>
 266:	c4 30       	cpi	r28, 0x04	; 4
 268:	d1 05       	cpc	r29, r1
 26a:	09 f0       	breq	.+2      	; 0x26e <_Z9lcd_printccji+0x5e>
 26c:	c3 c0       	rjmp	.+390    	; 0x3f4 <_Z9lcd_printccji+0x1e4>
 26e:	98 01       	movw	r18, r16
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	a5 ec       	ldi	r26, 0xC5	; 197
 27e:	b0 e2       	ldi	r27, 0x20	; 32
 280:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 284:	ac 01       	movw	r20, r24
 286:	52 95       	swap	r21
 288:	42 95       	swap	r20
 28a:	4f 70       	andi	r20, 0x0F	; 15
 28c:	45 27       	eor	r20, r21
 28e:	5f 70       	andi	r21, 0x0F	; 15
 290:	45 27       	eor	r20, r21
 292:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <temp+0x1>
 296:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <temp>
 29a:	9a 01       	movw	r18, r20
 29c:	ad ec       	ldi	r26, 0xCD	; 205
 29e:	bc ec       	ldi	r27, 0xCC	; 204
 2a0:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	9c 01       	movw	r18, r24
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	9a 01       	movw	r18, r20
 2c8:	28 1b       	sub	r18, r24
 2ca:	39 0b       	sbc	r19, r25
 2cc:	c9 01       	movw	r24, r18
 2ce:	c0 96       	adiw	r24, 0x30	; 48
 2d0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <thousand+0x1>
 2d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <thousand>
 2d8:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 2dc:	98 01       	movw	r18, r16
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	ab e7       	ldi	r26, 0x7B	; 123
 2e8:	b4 e1       	ldi	r27, 0x14	; 20
 2ea:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 2ee:	ac 01       	movw	r20, r24
 2f0:	56 95       	lsr	r21
 2f2:	47 95       	ror	r20
 2f4:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <temp+0x1>
 2f8:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <temp>
 2fc:	9a 01       	movw	r18, r20
 2fe:	ad ec       	ldi	r26, 0xCD	; 205
 300:	bc ec       	ldi	r27, 0xCC	; 204
 302:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	9c 01       	movw	r18, r24
 314:	22 0f       	add	r18, r18
 316:	33 1f       	adc	r19, r19
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	9a 01       	movw	r18, r20
 32a:	28 1b       	sub	r18, r24
 32c:	39 0b       	sbc	r19, r25
 32e:	c9 01       	movw	r24, r18
 330:	c0 96       	adiw	r24, 0x30	; 48
 332:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <hundred+0x1>
 336:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <hundred>
 33a:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <_Z9lcd_printccji+0x138>
 340:	c2 30       	cpi	r28, 0x02	; 2
 342:	d1 05       	cpc	r29, r1
 344:	09 f0       	breq	.+2      	; 0x348 <_Z9lcd_printccji+0x138>
 346:	5b c0       	rjmp	.+182    	; 0x3fe <_Z9lcd_printccji+0x1ee>
 348:	98 01       	movw	r18, r16
 34a:	ad ec       	ldi	r26, 0xCD	; 205
 34c:	bc ec       	ldi	r27, 0xCC	; 204
 34e:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 352:	ac 01       	movw	r20, r24
 354:	56 95       	lsr	r21
 356:	47 95       	ror	r20
 358:	56 95       	lsr	r21
 35a:	47 95       	ror	r20
 35c:	56 95       	lsr	r21
 35e:	47 95       	ror	r20
 360:	50 93 6f 00 	sts	0x006F, r21	; 0x80006f <temp+0x1>
 364:	40 93 6e 00 	sts	0x006E, r20	; 0x80006e <temp>
 368:	9a 01       	movw	r18, r20
 36a:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	9c 01       	movw	r18, r24
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	9a 01       	movw	r18, r20
 392:	28 1b       	sub	r18, r24
 394:	39 0b       	sbc	r19, r25
 396:	c9 01       	movw	r24, r18
 398:	c0 96       	adiw	r24, 0x30	; 48
 39a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <tens+0x1>
 39e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tens>
 3a2:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 3a6:	98 01       	movw	r18, r16
 3a8:	ad ec       	ldi	r26, 0xCD	; 205
 3aa:	bc ec       	ldi	r27, 0xCC	; 204
 3ac:	0e 94 26 03 	call	0x64c	; 0x64c <__umulhisi3>
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	9c 01       	movw	r18, r24
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	98 01       	movw	r18, r16
 3d4:	28 1b       	sub	r18, r24
 3d6:	39 0b       	sbc	r19, r25
 3d8:	c9 01       	movw	r24, r18
 3da:	c0 96       	adiw	r24, 0x30	; 48
 3dc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <unit+0x1>
 3e0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <unit>
 3e4:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 3e8:	26 97       	sbiw	r28, 0x06	; 6
 3ea:	6c f0       	brlt	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ec:	85 e4       	ldi	r24, 0x45	; 69
 3ee:	0e 94 c0 00 	call	0x180	; 0x180 <_Z11lcd_wr_charc>
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f4:	c3 30       	cpi	r28, 0x03	; 3
 3f6:	d1 05       	cpc	r29, r1
 3f8:	09 f0       	breq	.+2      	; 0x3fc <_Z9lcd_printccji+0x1ec>
 3fa:	a2 cf       	rjmp	.-188    	; 0x340 <_Z9lcd_printccji+0x130>
 3fc:	6f cf       	rjmp	.-290    	; 0x2dc <_Z9lcd_printccji+0xcc>
 3fe:	c1 30       	cpi	r28, 0x01	; 1
 400:	d1 05       	cpc	r29, r1
 402:	91 f7       	brne	.-28     	; 0x3e8 <_Z9lcd_printccji+0x1d8>
 404:	d0 cf       	rjmp	.-96     	; 0x3a6 <_Z9lcd_printccji+0x196>
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <_Z15lcd_port_configv>:
 410:	84 b3       	in	r24, 0x14	; 20
 412:	87 6f       	ori	r24, 0xF7	; 247
 414:	84 bb       	out	0x14, r24	; 20
 416:	85 b3       	in	r24, 0x15	; 21
 418:	80 78       	andi	r24, 0x80	; 128
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	08 95       	ret

0000041e <_Z14adc_pin_configv>:
 41e:	1a ba       	out	0x1a, r1	; 26
 420:	1b ba       	out	0x1b, r1	; 27
 422:	08 95       	ret

00000424 <_Z17motion_pin_configv>:
 424:	87 b3       	in	r24, 0x17	; 23
 426:	8f 60       	ori	r24, 0x0F	; 15
 428:	87 bb       	out	0x17, r24	; 23
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	80 7f       	andi	r24, 0xF0	; 240
 42e:	88 bb       	out	0x18, r24	; 24
 430:	81 b3       	in	r24, 0x11	; 17
 432:	80 63       	ori	r24, 0x30	; 48
 434:	81 bb       	out	0x11, r24	; 17
 436:	82 b3       	in	r24, 0x12	; 18
 438:	80 63       	ori	r24, 0x30	; 48
 43a:	82 bb       	out	0x12, r24	; 18
 43c:	08 95       	ret

0000043e <_Z9port_initv>:
 43e:	0e 94 08 02 	call	0x410	; 0x410 <_Z15lcd_port_configv>
 442:	0e 94 0f 02 	call	0x41e	; 0x41e <_Z14adc_pin_configv>
 446:	0e 94 12 02 	call	0x424	; 0x424 <_Z17motion_pin_configv>
 44a:	08 95       	ret

0000044c <_Z11timer1_initv>:
 44c:	1e bc       	out	0x2e, r1	; 46
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	8d bd       	out	0x2d, r24	; 45
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	9c bd       	out	0x2c, r25	; 44
 456:	1b bc       	out	0x2b, r1	; 43
 458:	8a bd       	out	0x2a, r24	; 42
 45a:	19 bc       	out	0x29, r1	; 41
 45c:	88 bd       	out	0x28, r24	; 40
 45e:	17 bc       	out	0x27, r1	; 39
 460:	86 bd       	out	0x26, r24	; 38
 462:	81 ea       	ldi	r24, 0xA1	; 161
 464:	8f bd       	out	0x2f, r24	; 47
 466:	8d e0       	ldi	r24, 0x0D	; 13
 468:	8e bd       	out	0x2e, r24	; 46
 46a:	08 95       	ret

0000046c <_Z8adc_initv>:
 46c:	16 b8       	out	0x06, r1	; 6
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	87 b9       	out	0x07, r24	; 7
 472:	80 e8       	ldi	r24, 0x80	; 128
 474:	88 b9       	out	0x08, r24	; 8
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	86 b9       	out	0x06, r24	; 6
 47a:	08 95       	ret

0000047c <_Z14ADC_Conversionh>:
 47c:	87 70       	andi	r24, 0x07	; 7
 47e:	80 62       	ori	r24, 0x20	; 32
 480:	87 b9       	out	0x07, r24	; 7
 482:	36 9a       	sbi	0x06, 6	; 6
 484:	34 9b       	sbis	0x06, 4	; 6
 486:	fe cf       	rjmp	.-4      	; 0x484 <_Z14ADC_Conversionh+0x8>
 488:	85 b1       	in	r24, 0x05	; 5
 48a:	34 9a       	sbi	0x06, 4	; 6
 48c:	08 95       	ret

0000048e <_Z12print_sensorcch>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	c8 2f       	mov	r28, r24
 494:	d6 2f       	mov	r29, r22
 496:	84 2f       	mov	r24, r20
 498:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z14ADC_Conversionh>
 49c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ADC_Value>
 4a0:	48 2f       	mov	r20, r24
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	23 e0       	ldi	r18, 0x03	; 3
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	6d 2f       	mov	r22, r29
 4aa:	8c 2f       	mov	r24, r28
 4ac:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <_Z10motion_seth>:
 4b6:	98 b3       	in	r25, 0x18	; 24
 4b8:	90 7f       	andi	r25, 0xF0	; 240
 4ba:	8f 70       	andi	r24, 0x0F	; 15
 4bc:	98 2b       	or	r25, r24
 4be:	98 bb       	out	0x18, r25	; 24
 4c0:	08 95       	ret

000004c2 <_Z7forwardv>:
 4c2:	86 e0       	ldi	r24, 0x06	; 6
 4c4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_Z10motion_seth>
 4c8:	08 95       	ret

000004ca <_Z8velocityhh>:
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 4ca:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor; 
 4cc:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
 4ce:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
 4d0:	68 bd       	out	0x28, r22	; 40
 4d2:	08 95       	ret

000004d4 <_Z12init_devicesv>:
}

void init_devices (void)
{
 cli();          //Clears the global interrupts
 4d4:	f8 94       	cli
 port_init();
 4d6:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z9port_initv>
 timer1_init();
 4da:	0e 94 26 02 	call	0x44c	; 0x44c <_Z11timer1_initv>
 adc_init();
 4de:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8adc_initv>
 sei();          //Enables the global interrupts
 4e2:	78 94       	sei
 4e4:	08 95       	ret

000004e6 <main>:
//Main Function
int main(void)
{
 unsigned char flag ;

 init_devices();
 4e6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_Z12init_devicesv>

 lcd_set_4bit();
 4ea:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z12lcd_set_4bitv>
 lcd_init();
 4ee:	0e 94 aa 00 	call	0x154	; 0x154 <_Z8lcd_initv>

 velocity(VELOCITY_MAX,VELOCITY_MAX);    // Set the speed to max velocity
 4f2:	62 e3       	ldi	r22, 0x32	; 50
 4f4:	82 e3       	ldi	r24, 0x32	; 50
 4f6:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8velocityhh>
 lcd_print (2,1,VELOCITY_MAX,3);
 4fa:	23 e0       	ldi	r18, 0x03	; 3
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	42 e3       	ldi	r20, 0x32	; 50
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
 lcd_print (2,5,VELOCITY_MAX,3);
 50a:	23 e0       	ldi	r18, 0x03	; 3
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	42 e3       	ldi	r20, 0x32	; 50
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	65 e0       	ldi	r22, 0x05	; 5
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
 forward();                              // start to move froward
 51a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <_Z7forwardv>
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right

	flag=0;
 51e:	c0 e0       	ldi	r28, 0x00	; 0
 lcd_print (2,5,VELOCITY_MAX,3);
 forward();                              // start to move froward

 while(1)
 {
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z14ADC_Conversionh>
 526:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Left_white_line>
	Center_white_line = ADC_Conversion(4);	//Getting data of Center WL Sensor
 52a:	84 e0       	ldi	r24, 0x04	; 4
 52c:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z14ADC_Conversionh>
 530:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Center_white_line>
	Right_white_line = ADC_Conversion(5);	//Getting data of Right WL Sensor
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	0e 94 3e 02 	call	0x47c	; 0x47c <_Z14ADC_Conversionh>
 53a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
 53e:	43 e0       	ldi	r20, 0x03	; 3
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 47 02 	call	0x48e	; 0x48e <_Z12print_sensorcch>
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
 548:	44 e0       	ldi	r20, 0x04	; 4
 54a:	65 e0       	ldi	r22, 0x05	; 5
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 47 02 	call	0x48e	; 0x48e <_Z12print_sensorcch>
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right
 552:	45 e0       	ldi	r20, 0x05	; 5
 554:	69 e0       	ldi	r22, 0x09	; 9
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 47 02 	call	0x48e	; 0x48e <_Z12print_sensorcch>

	flag=0;

	if(Center_white_line>THRESHOLD)               // Is middle Whiteline is within threshold limit
 55c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Center_white_line>
 560:	91 3a       	cpi	r25, 0xA1	; 161
 562:	08 f4       	brcc	.+2      	; 0x566 <main+0x80>
 564:	67 c0       	rjmp	.+206    	; 0x634 <main+0x14e>
	{                                             
		flag=1;
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity 
 566:	62 e3       	ldi	r22, 0x32	; 50
 568:	82 e3       	ldi	r24, 0x32	; 50
 56a:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8velocityhh>
		lcd_print (2,1,VELOCITY_MAX,3);
 56e:	23 e0       	ldi	r18, 0x03	; 3
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	42 e3       	ldi	r20, 0x32	; 50
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
		lcd_print (2,5,VELOCITY_MAX,3);
 57e:	23 e0       	ldi	r18, 0x03	; 3
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	42 e3       	ldi	r20, 0x32	; 50
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	65 e0       	ldi	r22, 0x05	; 5
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>

	flag=0;

	if(Center_white_line>THRESHOLD)               // Is middle Whiteline is within threshold limit
	{                                             
		flag=1;
 58e:	21 e0       	ldi	r18, 0x01	; 1
 590:	2b c0       	rjmp	.+86     	; 0x5e8 <main+0x102>

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	{                                             
		flag=1;                       
		velocity(VELOCITY_MAX,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
 592:	6e e1       	ldi	r22, 0x1E	; 30
 594:	82 e3       	ldi	r24, 0x32	; 50
 596:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8velocityhh>
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
 59a:	23 e0       	ldi	r18, 0x03	; 3
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	42 e3       	ldi	r20, 0x32	; 50
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
		lcd_print (2,5,VELOCITY_MIN,3);         
 5aa:	23 e0       	ldi	r18, 0x03	; 3
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	4e e1       	ldi	r20, 0x1E	; 30
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	65 e0       	ldi	r22, 0x05	; 5
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
	}

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	//if((Left_white_line>THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
	{                                             
		flag=1;                       
 5ba:	21 e0       	ldi	r18, 0x01	; 1
 5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <main+0x102>

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	{
		flag=1;    
		velocity(VELOCITY_MIN,VELOCITY_MAX);      // Run robot right wheel at max velocity and left wheel 
 5be:	62 e3       	ldi	r22, 0x32	; 50
 5c0:	8e e1       	ldi	r24, 0x1E	; 30
 5c2:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8velocityhh>
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
 5c6:	23 e0       	ldi	r18, 0x03	; 3
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	4e e1       	ldi	r20, 0x1E	; 30
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
		lcd_print (2,5,VELOCITY_MAX,3);
 5d6:	23 e0       	ldi	r18, 0x03	; 3
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	42 e3       	ldi	r20, 0x32	; 50
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	65 e0       	ldi	r22, 0x05	; 5
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
	}

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	//if((Right_white_line>THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
	{
		flag=1;    
 5e6:	21 e0       	ldi	r18, 0x01	; 1
	/*	velocity(60,VELOCITY_MIN);      // Run robot left wheel at max velocity and right wheel 
		lcd_print (2,1,VELOCITY_MAX,3);           // at min velocity
		lcd_print (2,5,VELOCITY_MIN,3);*/
	}

	if(Center_white_line<THRESHOLD && Left_white_line<THRESHOLD && Right_white_line<THRESHOLD && (flag == 0))
 5e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Center_white_line>
 5ec:	90 3a       	cpi	r25, 0xA0	; 160
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <main+0x10c>
 5f0:	97 cf       	rjmp	.-210    	; 0x520 <main+0x3a>
 5f2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Left_white_line>
 5f6:	90 3a       	cpi	r25, 0xA0	; 160
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <main+0x116>
 5fa:	92 cf       	rjmp	.-220    	; 0x520 <main+0x3a>
 5fc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 600:	90 3a       	cpi	r25, 0xA0	; 160
 602:	08 f0       	brcs	.+2      	; 0x606 <main+0x120>
 604:	8d cf       	rjmp	.-230    	; 0x520 <main+0x3a>
 606:	21 11       	cpse	r18, r1
 608:	8b cf       	rjmp	.-234    	; 0x520 <main+0x3a>
	                                // if all Whiteline sensor are not within threshold limit    
	{
		flag=1;
		velocity(VELOCITY_LOW,VELOCITY_LOW);      // stop the robot
 60a:	6c 2f       	mov	r22, r28
 60c:	8c 2f       	mov	r24, r28
 60e:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z8velocityhh>
		lcd_print (2,1,VELOCITY_LOW,3);
 612:	23 e0       	ldi	r18, 0x03	; 3
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
		lcd_print (2,5,VELOCITY_LOW,3);
 622:	23 e0       	ldi	r18, 0x03	; 3
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e0       	ldi	r20, 0x00	; 0
 628:	50 e0       	ldi	r21, 0x00	; 0
 62a:	65 e0       	ldi	r22, 0x05	; 5
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 08 01 	call	0x210	; 0x210 <_Z9lcd_printccji>
 632:	76 cf       	rjmp	.-276    	; 0x520 <main+0x3a>
		velocity(VELOCITY_MAX,VELOCITY_MAX);      // Run robot at max velocity 
		lcd_print (2,1,VELOCITY_MAX,3);
		lcd_print (2,5,VELOCITY_MAX,3);
	}

	if((Left_white_line<THRESHOLD) && (flag==0))  // Is left Whiteline is not within threshold limit
 634:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Left_white_line>
 638:	90 3a       	cpi	r25, 0xA0	; 160
 63a:	08 f4       	brcc	.+2      	; 0x63e <main+0x158>
 63c:	aa cf       	rjmp	.-172    	; 0x592 <main+0xac>
	/*	velocity(VELOCITY_MIN,60);      // Run robot right wheel at max velocity and left wheel 
		lcd_print (2,1,VELOCITY_MIN,3);           // at min velocity
		lcd_print (2,5,VELOCITY_MAX,3);*/
	}

	if((Right_white_line<THRESHOLD) && (flag==0)) // Is right Whiteline is not within threshold limit
 63e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 642:	90 3a       	cpi	r25, 0xA0	; 160
 644:	08 f4       	brcc	.+2      	; 0x648 <main+0x162>
 646:	bb cf       	rjmp	.-138    	; 0x5be <main+0xd8>
 
	print_sensor(1,1,3);		//Prints value of White Line Sensor Left
	print_sensor(1,5,4);		//Prints value of White Line Sensor Center
	print_sensor(1,9,5);		//Prints value of White Line Sensor Right

	flag=0;
 648:	2c 2f       	mov	r18, r28
 64a:	ce cf       	rjmp	.-100    	; 0x5e8 <main+0x102>

0000064c <__umulhisi3>:
 64c:	a2 9f       	mul	r26, r18
 64e:	b0 01       	movw	r22, r0
 650:	b3 9f       	mul	r27, r19
 652:	c0 01       	movw	r24, r0
 654:	a3 9f       	mul	r26, r19
 656:	70 0d       	add	r23, r0
 658:	81 1d       	adc	r24, r1
 65a:	11 24       	eor	r1, r1
 65c:	91 1d       	adc	r25, r1
 65e:	b2 9f       	mul	r27, r18
 660:	70 0d       	add	r23, r0
 662:	81 1d       	adc	r24, r1
 664:	11 24       	eor	r1, r1
 666:	91 1d       	adc	r25, r1
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
